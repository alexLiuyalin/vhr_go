// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/user.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetUserReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserReqMultiError, or
// nil if none found.
func (m *GetUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetUserReqMultiError(errors)
	}

	return nil
}

// GetUserReqMultiError is an error wrapping multiple validation errors
// returned by GetUserReq.ValidateAll() if the designated constraints aren't met.
type GetUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserReqMultiError) AllErrors() []error { return m }

// GetUserReqValidationError is the validation error returned by
// GetUserReq.Validate if the designated constraints aren't met.
type GetUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserReqValidationError) ErrorName() string { return "GetUserReqValidationError" }

// Error satisfies the builtin error interface
func (e GetUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserReqValidationError{}

// Validate checks the field values on GetUserReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserReplyMultiError, or
// nil if none found.
func (m *GetUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Username

	if len(errors) > 0 {
		return GetUserReplyMultiError(errors)
	}

	return nil
}

// GetUserReplyMultiError is an error wrapping multiple validation errors
// returned by GetUserReply.ValidateAll() if the designated constraints aren't met.
type GetUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserReplyMultiError) AllErrors() []error { return m }

// GetUserReplyValidationError is the validation error returned by
// GetUserReply.Validate if the designated constraints aren't met.
type GetUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserReplyValidationError) ErrorName() string { return "GetUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserReplyValidationError{}

// Validate checks the field values on GetUserByUsernameReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserByUsernameReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserByUsernameReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserByUsernameReqMultiError, or nil if none found.
func (m *GetUserByUsernameReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserByUsernameReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	if len(errors) > 0 {
		return GetUserByUsernameReqMultiError(errors)
	}

	return nil
}

// GetUserByUsernameReqMultiError is an error wrapping multiple validation
// errors returned by GetUserByUsernameReq.ValidateAll() if the designated
// constraints aren't met.
type GetUserByUsernameReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserByUsernameReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserByUsernameReqMultiError) AllErrors() []error { return m }

// GetUserByUsernameReqValidationError is the validation error returned by
// GetUserByUsernameReq.Validate if the designated constraints aren't met.
type GetUserByUsernameReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserByUsernameReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserByUsernameReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserByUsernameReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserByUsernameReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserByUsernameReqValidationError) ErrorName() string {
	return "GetUserByUsernameReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserByUsernameReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserByUsernameReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserByUsernameReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserByUsernameReqValidationError{}

// Validate checks the field values on GetUserByUsernameReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserByUsernameReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserByUsernameReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserByUsernameReplyMultiError, or nil if none found.
func (m *GetUserByUsernameReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserByUsernameReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Username

	if len(errors) > 0 {
		return GetUserByUsernameReplyMultiError(errors)
	}

	return nil
}

// GetUserByUsernameReplyMultiError is an error wrapping multiple validation
// errors returned by GetUserByUsernameReply.ValidateAll() if the designated
// constraints aren't met.
type GetUserByUsernameReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserByUsernameReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserByUsernameReplyMultiError) AllErrors() []error { return m }

// GetUserByUsernameReplyValidationError is the validation error returned by
// GetUserByUsernameReply.Validate if the designated constraints aren't met.
type GetUserByUsernameReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserByUsernameReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserByUsernameReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserByUsernameReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserByUsernameReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserByUsernameReplyValidationError) ErrorName() string {
	return "GetUserByUsernameReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserByUsernameReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserByUsernameReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserByUsernameReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserByUsernameReplyValidationError{}

// Validate checks the field values on CreateUserReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateUserReqMultiError, or
// nil if none found.
func (m *CreateUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Password

	if len(errors) > 0 {
		return CreateUserReqMultiError(errors)
	}

	return nil
}

// CreateUserReqMultiError is an error wrapping multiple validation errors
// returned by CreateUserReq.ValidateAll() if the designated constraints
// aren't met.
type CreateUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserReqMultiError) AllErrors() []error { return m }

// CreateUserReqValidationError is the validation error returned by
// CreateUserReq.Validate if the designated constraints aren't met.
type CreateUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserReqValidationError) ErrorName() string { return "CreateUserReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserReqValidationError{}

// Validate checks the field values on CreateUserReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserReplyMultiError, or nil if none found.
func (m *CreateUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Username

	if len(errors) > 0 {
		return CreateUserReplyMultiError(errors)
	}

	return nil
}

// CreateUserReplyMultiError is an error wrapping multiple validation errors
// returned by CreateUserReply.ValidateAll() if the designated constraints
// aren't met.
type CreateUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserReplyMultiError) AllErrors() []error { return m }

// CreateUserReplyValidationError is the validation error returned by
// CreateUserReply.Validate if the designated constraints aren't met.
type CreateUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserReplyValidationError) ErrorName() string { return "CreateUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserReplyValidationError{}

// Validate checks the field values on ListUserReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListUserReqMultiError, or
// nil if none found.
func (m *ListUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return ListUserReqMultiError(errors)
	}

	return nil
}

// ListUserReqMultiError is an error wrapping multiple validation errors
// returned by ListUserReq.ValidateAll() if the designated constraints aren't met.
type ListUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserReqMultiError) AllErrors() []error { return m }

// ListUserReqValidationError is the validation error returned by
// ListUserReq.Validate if the designated constraints aren't met.
type ListUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserReqValidationError) ErrorName() string { return "ListUserReqValidationError" }

// Error satisfies the builtin error interface
func (e ListUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserReqValidationError{}

// Validate checks the field values on ListUserReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListUserReplyMultiError, or
// nil if none found.
func (m *ListUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUserReplyValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUserReplyValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserReplyValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListUserReplyMultiError(errors)
	}

	return nil
}

// ListUserReplyMultiError is an error wrapping multiple validation errors
// returned by ListUserReply.ValidateAll() if the designated constraints
// aren't met.
type ListUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserReplyMultiError) AllErrors() []error { return m }

// ListUserReplyValidationError is the validation error returned by
// ListUserReply.Validate if the designated constraints aren't met.
type ListUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserReplyValidationError) ErrorName() string { return "ListUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserReplyValidationError{}

// Validate checks the field values on VerifyPasswordReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *VerifyPasswordReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyPasswordReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifyPasswordReqMultiError, or nil if none found.
func (m *VerifyPasswordReq) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyPasswordReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Password

	if len(errors) > 0 {
		return VerifyPasswordReqMultiError(errors)
	}

	return nil
}

// VerifyPasswordReqMultiError is an error wrapping multiple validation errors
// returned by VerifyPasswordReq.ValidateAll() if the designated constraints
// aren't met.
type VerifyPasswordReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyPasswordReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyPasswordReqMultiError) AllErrors() []error { return m }

// VerifyPasswordReqValidationError is the validation error returned by
// VerifyPasswordReq.Validate if the designated constraints aren't met.
type VerifyPasswordReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyPasswordReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyPasswordReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyPasswordReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyPasswordReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyPasswordReqValidationError) ErrorName() string {
	return "VerifyPasswordReqValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyPasswordReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyPasswordReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyPasswordReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyPasswordReqValidationError{}

// Validate checks the field values on VerifyPasswordReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VerifyPasswordReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyPasswordReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifyPasswordReplyMultiError, or nil if none found.
func (m *VerifyPasswordReply) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyPasswordReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ok

	// no validation rules for Id

	if len(errors) > 0 {
		return VerifyPasswordReplyMultiError(errors)
	}

	return nil
}

// VerifyPasswordReplyMultiError is an error wrapping multiple validation
// errors returned by VerifyPasswordReply.ValidateAll() if the designated
// constraints aren't met.
type VerifyPasswordReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyPasswordReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyPasswordReplyMultiError) AllErrors() []error { return m }

// VerifyPasswordReplyValidationError is the validation error returned by
// VerifyPasswordReply.Validate if the designated constraints aren't met.
type VerifyPasswordReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyPasswordReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyPasswordReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyPasswordReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyPasswordReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyPasswordReplyValidationError) ErrorName() string {
	return "VerifyPasswordReplyValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyPasswordReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyPasswordReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyPasswordReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyPasswordReplyValidationError{}

// Validate checks the field values on ListAddressReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListAddressReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAddressReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListAddressReqMultiError,
// or nil if none found.
func (m *ListAddressReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAddressReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	if len(errors) > 0 {
		return ListAddressReqMultiError(errors)
	}

	return nil
}

// ListAddressReqMultiError is an error wrapping multiple validation errors
// returned by ListAddressReq.ValidateAll() if the designated constraints
// aren't met.
type ListAddressReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAddressReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAddressReqMultiError) AllErrors() []error { return m }

// ListAddressReqValidationError is the validation error returned by
// ListAddressReq.Validate if the designated constraints aren't met.
type ListAddressReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAddressReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAddressReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAddressReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAddressReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAddressReqValidationError) ErrorName() string { return "ListAddressReqValidationError" }

// Error satisfies the builtin error interface
func (e ListAddressReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAddressReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAddressReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAddressReqValidationError{}

// Validate checks the field values on ListAddressReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListAddressReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAddressReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAddressReplyMultiError, or nil if none found.
func (m *ListAddressReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAddressReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAddressReplyValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAddressReplyValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAddressReplyValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAddressReplyMultiError(errors)
	}

	return nil
}

// ListAddressReplyMultiError is an error wrapping multiple validation errors
// returned by ListAddressReply.ValidateAll() if the designated constraints
// aren't met.
type ListAddressReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAddressReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAddressReplyMultiError) AllErrors() []error { return m }

// ListAddressReplyValidationError is the validation error returned by
// ListAddressReply.Validate if the designated constraints aren't met.
type ListAddressReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAddressReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAddressReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAddressReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAddressReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAddressReplyValidationError) ErrorName() string { return "ListAddressReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListAddressReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAddressReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAddressReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAddressReplyValidationError{}

// Validate checks the field values on CreateAddressReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateAddressReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAddressReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAddressReqMultiError, or nil if none found.
func (m *CreateAddressReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAddressReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	// no validation rules for Name

	// no validation rules for Mobile

	// no validation rules for Address

	// no validation rules for PostCode

	if len(errors) > 0 {
		return CreateAddressReqMultiError(errors)
	}

	return nil
}

// CreateAddressReqMultiError is an error wrapping multiple validation errors
// returned by CreateAddressReq.ValidateAll() if the designated constraints
// aren't met.
type CreateAddressReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAddressReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAddressReqMultiError) AllErrors() []error { return m }

// CreateAddressReqValidationError is the validation error returned by
// CreateAddressReq.Validate if the designated constraints aren't met.
type CreateAddressReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAddressReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAddressReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAddressReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAddressReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAddressReqValidationError) ErrorName() string { return "CreateAddressReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateAddressReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAddressReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAddressReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAddressReqValidationError{}

// Validate checks the field values on CreateAddressReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAddressReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAddressReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAddressReplyMultiError, or nil if none found.
func (m *CreateAddressReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAddressReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Mobile

	// no validation rules for Address

	// no validation rules for PostCode

	if len(errors) > 0 {
		return CreateAddressReplyMultiError(errors)
	}

	return nil
}

// CreateAddressReplyMultiError is an error wrapping multiple validation errors
// returned by CreateAddressReply.ValidateAll() if the designated constraints
// aren't met.
type CreateAddressReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAddressReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAddressReplyMultiError) AllErrors() []error { return m }

// CreateAddressReplyValidationError is the validation error returned by
// CreateAddressReply.Validate if the designated constraints aren't met.
type CreateAddressReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAddressReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAddressReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAddressReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAddressReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAddressReplyValidationError) ErrorName() string {
	return "CreateAddressReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAddressReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAddressReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAddressReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAddressReplyValidationError{}

// Validate checks the field values on GetAddressReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetAddressReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAddressReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetAddressReqMultiError, or
// nil if none found.
func (m *GetAddressReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAddressReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetAddressReqMultiError(errors)
	}

	return nil
}

// GetAddressReqMultiError is an error wrapping multiple validation errors
// returned by GetAddressReq.ValidateAll() if the designated constraints
// aren't met.
type GetAddressReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAddressReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAddressReqMultiError) AllErrors() []error { return m }

// GetAddressReqValidationError is the validation error returned by
// GetAddressReq.Validate if the designated constraints aren't met.
type GetAddressReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAddressReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAddressReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAddressReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAddressReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAddressReqValidationError) ErrorName() string { return "GetAddressReqValidationError" }

// Error satisfies the builtin error interface
func (e GetAddressReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAddressReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAddressReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAddressReqValidationError{}

// Validate checks the field values on GetAddressReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAddressReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAddressReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAddressReplyMultiError, or nil if none found.
func (m *GetAddressReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAddressReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Mobile

	// no validation rules for Address

	// no validation rules for PostCode

	if len(errors) > 0 {
		return GetAddressReplyMultiError(errors)
	}

	return nil
}

// GetAddressReplyMultiError is an error wrapping multiple validation errors
// returned by GetAddressReply.ValidateAll() if the designated constraints
// aren't met.
type GetAddressReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAddressReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAddressReplyMultiError) AllErrors() []error { return m }

// GetAddressReplyValidationError is the validation error returned by
// GetAddressReply.Validate if the designated constraints aren't met.
type GetAddressReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAddressReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAddressReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAddressReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAddressReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAddressReplyValidationError) ErrorName() string { return "GetAddressReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetAddressReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAddressReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAddressReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAddressReplyValidationError{}

// Validate checks the field values on ListCardReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListCardReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCardReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListCardReqMultiError, or
// nil if none found.
func (m *ListCardReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCardReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	if len(errors) > 0 {
		return ListCardReqMultiError(errors)
	}

	return nil
}

// ListCardReqMultiError is an error wrapping multiple validation errors
// returned by ListCardReq.ValidateAll() if the designated constraints aren't met.
type ListCardReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCardReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCardReqMultiError) AllErrors() []error { return m }

// ListCardReqValidationError is the validation error returned by
// ListCardReq.Validate if the designated constraints aren't met.
type ListCardReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCardReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCardReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCardReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCardReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCardReqValidationError) ErrorName() string { return "ListCardReqValidationError" }

// Error satisfies the builtin error interface
func (e ListCardReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCardReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCardReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCardReqValidationError{}

// Validate checks the field values on ListCardReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListCardReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCardReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListCardReplyMultiError, or
// nil if none found.
func (m *ListCardReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCardReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCardReplyValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCardReplyValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCardReplyValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCardReplyMultiError(errors)
	}

	return nil
}

// ListCardReplyMultiError is an error wrapping multiple validation errors
// returned by ListCardReply.ValidateAll() if the designated constraints
// aren't met.
type ListCardReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCardReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCardReplyMultiError) AllErrors() []error { return m }

// ListCardReplyValidationError is the validation error returned by
// ListCardReply.Validate if the designated constraints aren't met.
type ListCardReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCardReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCardReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCardReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCardReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCardReplyValidationError) ErrorName() string { return "ListCardReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListCardReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCardReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCardReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCardReplyValidationError{}

// Validate checks the field values on CreateCardReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateCardReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCardReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateCardReqMultiError, or
// nil if none found.
func (m *CreateCardReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCardReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	// no validation rules for CardNo

	// no validation rules for Ccv

	// no validation rules for Expires

	if len(errors) > 0 {
		return CreateCardReqMultiError(errors)
	}

	return nil
}

// CreateCardReqMultiError is an error wrapping multiple validation errors
// returned by CreateCardReq.ValidateAll() if the designated constraints
// aren't met.
type CreateCardReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCardReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCardReqMultiError) AllErrors() []error { return m }

// CreateCardReqValidationError is the validation error returned by
// CreateCardReq.Validate if the designated constraints aren't met.
type CreateCardReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCardReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCardReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCardReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCardReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCardReqValidationError) ErrorName() string { return "CreateCardReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateCardReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCardReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCardReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCardReqValidationError{}

// Validate checks the field values on CreateCardReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateCardReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCardReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCardReplyMultiError, or nil if none found.
func (m *CreateCardReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCardReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateCardReplyMultiError(errors)
	}

	return nil
}

// CreateCardReplyMultiError is an error wrapping multiple validation errors
// returned by CreateCardReply.ValidateAll() if the designated constraints
// aren't met.
type CreateCardReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCardReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCardReplyMultiError) AllErrors() []error { return m }

// CreateCardReplyValidationError is the validation error returned by
// CreateCardReply.Validate if the designated constraints aren't met.
type CreateCardReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCardReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCardReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCardReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCardReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCardReplyValidationError) ErrorName() string { return "CreateCardReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateCardReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCardReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCardReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCardReplyValidationError{}

// Validate checks the field values on GetCardReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetCardReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCardReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetCardReqMultiError, or
// nil if none found.
func (m *GetCardReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCardReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetCardReqMultiError(errors)
	}

	return nil
}

// GetCardReqMultiError is an error wrapping multiple validation errors
// returned by GetCardReq.ValidateAll() if the designated constraints aren't met.
type GetCardReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCardReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCardReqMultiError) AllErrors() []error { return m }

// GetCardReqValidationError is the validation error returned by
// GetCardReq.Validate if the designated constraints aren't met.
type GetCardReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCardReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCardReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCardReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCardReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCardReqValidationError) ErrorName() string { return "GetCardReqValidationError" }

// Error satisfies the builtin error interface
func (e GetCardReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCardReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCardReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCardReqValidationError{}

// Validate checks the field values on GetCardReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetCardReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCardReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetCardReplyMultiError, or
// nil if none found.
func (m *GetCardReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCardReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CardNo

	// no validation rules for Ccv

	// no validation rules for Expires

	if len(errors) > 0 {
		return GetCardReplyMultiError(errors)
	}

	return nil
}

// GetCardReplyMultiError is an error wrapping multiple validation errors
// returned by GetCardReply.ValidateAll() if the designated constraints aren't met.
type GetCardReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCardReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCardReplyMultiError) AllErrors() []error { return m }

// GetCardReplyValidationError is the validation error returned by
// GetCardReply.Validate if the designated constraints aren't met.
type GetCardReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCardReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCardReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCardReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCardReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCardReplyValidationError) ErrorName() string { return "GetCardReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetCardReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCardReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCardReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCardReplyValidationError{}

// Validate checks the field values on DeleteCardReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteCardReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCardReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteCardReqMultiError, or
// nil if none found.
func (m *DeleteCardReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCardReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	if len(errors) > 0 {
		return DeleteCardReqMultiError(errors)
	}

	return nil
}

// DeleteCardReqMultiError is an error wrapping multiple validation errors
// returned by DeleteCardReq.ValidateAll() if the designated constraints
// aren't met.
type DeleteCardReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCardReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCardReqMultiError) AllErrors() []error { return m }

// DeleteCardReqValidationError is the validation error returned by
// DeleteCardReq.Validate if the designated constraints aren't met.
type DeleteCardReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCardReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCardReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCardReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCardReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCardReqValidationError) ErrorName() string { return "DeleteCardReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteCardReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCardReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCardReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCardReqValidationError{}

// Validate checks the field values on DeleteCardReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteCardReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCardReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCardReplyMultiError, or nil if none found.
func (m *DeleteCardReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCardReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ok

	if len(errors) > 0 {
		return DeleteCardReplyMultiError(errors)
	}

	return nil
}

// DeleteCardReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteCardReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteCardReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCardReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCardReplyMultiError) AllErrors() []error { return m }

// DeleteCardReplyValidationError is the validation error returned by
// DeleteCardReply.Validate if the designated constraints aren't met.
type DeleteCardReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCardReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCardReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCardReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCardReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCardReplyValidationError) ErrorName() string { return "DeleteCardReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteCardReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCardReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCardReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCardReplyValidationError{}

// Validate checks the field values on SaveUserReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SaveUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaveUserReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SaveUserReqMultiError, or
// nil if none found.
func (m *SaveUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SaveUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Username

	// no validation rules for Password

	if len(errors) > 0 {
		return SaveUserReqMultiError(errors)
	}

	return nil
}

// SaveUserReqMultiError is an error wrapping multiple validation errors
// returned by SaveUserReq.ValidateAll() if the designated constraints aren't met.
type SaveUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaveUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaveUserReqMultiError) AllErrors() []error { return m }

// SaveUserReqValidationError is the validation error returned by
// SaveUserReq.Validate if the designated constraints aren't met.
type SaveUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveUserReqValidationError) ErrorName() string { return "SaveUserReqValidationError" }

// Error satisfies the builtin error interface
func (e SaveUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveUserReqValidationError{}

// Validate checks the field values on SaveUserReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SaveUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaveUserReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SaveUserReplyMultiError, or
// nil if none found.
func (m *SaveUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SaveUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return SaveUserReplyMultiError(errors)
	}

	return nil
}

// SaveUserReplyMultiError is an error wrapping multiple validation errors
// returned by SaveUserReply.ValidateAll() if the designated constraints
// aren't met.
type SaveUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaveUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaveUserReplyMultiError) AllErrors() []error { return m }

// SaveUserReplyValidationError is the validation error returned by
// SaveUserReply.Validate if the designated constraints aren't met.
type SaveUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveUserReplyValidationError) ErrorName() string { return "SaveUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e SaveUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveUserReplyValidationError{}

// Validate checks the field values on ListUserReply_User with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserReply_User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserReply_User with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserReply_UserMultiError, or nil if none found.
func (m *ListUserReply_User) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserReply_User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return ListUserReply_UserMultiError(errors)
	}

	return nil
}

// ListUserReply_UserMultiError is an error wrapping multiple validation errors
// returned by ListUserReply_User.ValidateAll() if the designated constraints
// aren't met.
type ListUserReply_UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserReply_UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserReply_UserMultiError) AllErrors() []error { return m }

// ListUserReply_UserValidationError is the validation error returned by
// ListUserReply_User.Validate if the designated constraints aren't met.
type ListUserReply_UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserReply_UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserReply_UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserReply_UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserReply_UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserReply_UserValidationError) ErrorName() string {
	return "ListUserReply_UserValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserReply_UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserReply_User.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserReply_UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserReply_UserValidationError{}

// Validate checks the field values on ListAddressReply_Address with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAddressReply_Address) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAddressReply_Address with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAddressReply_AddressMultiError, or nil if none found.
func (m *ListAddressReply_Address) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAddressReply_Address) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Mobile

	// no validation rules for Address

	// no validation rules for PostCode

	if len(errors) > 0 {
		return ListAddressReply_AddressMultiError(errors)
	}

	return nil
}

// ListAddressReply_AddressMultiError is an error wrapping multiple validation
// errors returned by ListAddressReply_Address.ValidateAll() if the designated
// constraints aren't met.
type ListAddressReply_AddressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAddressReply_AddressMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAddressReply_AddressMultiError) AllErrors() []error { return m }

// ListAddressReply_AddressValidationError is the validation error returned by
// ListAddressReply_Address.Validate if the designated constraints aren't met.
type ListAddressReply_AddressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAddressReply_AddressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAddressReply_AddressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAddressReply_AddressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAddressReply_AddressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAddressReply_AddressValidationError) ErrorName() string {
	return "ListAddressReply_AddressValidationError"
}

// Error satisfies the builtin error interface
func (e ListAddressReply_AddressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAddressReply_Address.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAddressReply_AddressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAddressReply_AddressValidationError{}

// Validate checks the field values on ListCardReply_Card with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCardReply_Card) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCardReply_Card with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCardReply_CardMultiError, or nil if none found.
func (m *ListCardReply_Card) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCardReply_Card) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CardNo

	// no validation rules for Ccv

	// no validation rules for Expires

	if len(errors) > 0 {
		return ListCardReply_CardMultiError(errors)
	}

	return nil
}

// ListCardReply_CardMultiError is an error wrapping multiple validation errors
// returned by ListCardReply_Card.ValidateAll() if the designated constraints
// aren't met.
type ListCardReply_CardMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCardReply_CardMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCardReply_CardMultiError) AllErrors() []error { return m }

// ListCardReply_CardValidationError is the validation error returned by
// ListCardReply_Card.Validate if the designated constraints aren't met.
type ListCardReply_CardValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCardReply_CardValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCardReply_CardValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCardReply_CardValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCardReply_CardValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCardReply_CardValidationError) ErrorName() string {
	return "ListCardReply_CardValidationError"
}

// Error satisfies the builtin error interface
func (e ListCardReply_CardValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCardReply_Card.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCardReply_CardValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCardReply_CardValidationError{}
