// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.27.0
// source: v1/employee.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationEmployeeDeps = "/api.frontend.web.v1.Employee/Deps"
const OperationEmployeeExport = "/api.frontend.web.v1.Employee/Export"
const OperationEmployeeJoblevels = "/api.frontend.web.v1.Employee/Joblevels"
const OperationEmployeeList = "/api.frontend.web.v1.Employee/List"
const OperationEmployeeMaxWorkID = "/api.frontend.web.v1.Employee/MaxWorkID"
const OperationEmployeeNations = "/api.frontend.web.v1.Employee/Nations"
const OperationEmployeePoliticsstatus = "/api.frontend.web.v1.Employee/Politicsstatus"
const OperationEmployeePositions = "/api.frontend.web.v1.Employee/Positions"

type EmployeeHTTPServer interface {
	// Deps 部门
	Deps(context.Context, *GetEmptyRequest) (*GetDepsReply, error)
	// Export 导出数据
	Export(context.Context, *GetEmptyRequest) (*GetExportReply, error)
	// Joblevels 职称
	Joblevels(context.Context, *GetEmptyRequest) (*GetJoblevelsReply, error)
	// List 获取员工信息列表
	List(context.Context, *GetBasicRequest) (*EmployeeReply, error)
	// MaxWorkID 返回的是最大的工号
	MaxWorkID(context.Context, *GetEmptyRequest) (*GetMaxWorkIDReply, error)
	// Nations 民族
	Nations(context.Context, *GetEmptyRequest) (*GetNationsReply, error)
	// Politicsstatus 政治面貌
	Politicsstatus(context.Context, *GetEmptyRequest) (*GetPoliticsstatusReply, error)
	// Positions 职位
	Positions(context.Context, *GetEmptyRequest) (*GetPositionsReply, error)
}

func RegisterEmployeeHTTPServer(s *http.Server, srv EmployeeHTTPServer) {
	r := s.Route("/")
	r.GET("/api/v1/employee/basic", _Employee_List0_HTTP_Handler(srv))
	r.GET("/api/v1/employee/basic/nations", _Employee_Nations0_HTTP_Handler(srv))
	r.GET("/api/v1/employee/basic/joblevels", _Employee_Joblevels0_HTTP_Handler(srv))
	r.GET("/api/v1/employee/basic/politicsstatus", _Employee_Politicsstatus0_HTTP_Handler(srv))
	r.GET("/api/v1/employee/basic/deps", _Employee_Deps0_HTTP_Handler(srv))
	r.GET("/api/v1/employee/basic/positions", _Employee_Positions0_HTTP_Handler(srv))
	r.GET("/employee/basic/maxWorkID", _Employee_MaxWorkID0_HTTP_Handler(srv))
	r.POST("/employee/basic/export", _Employee_Export0_HTTP_Handler(srv))
}

func _Employee_List0_HTTP_Handler(srv EmployeeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetBasicRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEmployeeList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.List(ctx, req.(*GetBasicRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*EmployeeReply)
		return ctx.Result(200, reply)
	}
}

func _Employee_Nations0_HTTP_Handler(srv EmployeeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetEmptyRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEmployeeNations)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Nations(ctx, req.(*GetEmptyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetNationsReply)
		return ctx.Result(200, reply)
	}
}

func _Employee_Joblevels0_HTTP_Handler(srv EmployeeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetEmptyRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEmployeeJoblevels)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Joblevels(ctx, req.(*GetEmptyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetJoblevelsReply)
		return ctx.Result(200, reply)
	}
}

func _Employee_Politicsstatus0_HTTP_Handler(srv EmployeeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetEmptyRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEmployeePoliticsstatus)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Politicsstatus(ctx, req.(*GetEmptyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetPoliticsstatusReply)
		return ctx.Result(200, reply)
	}
}

func _Employee_Deps0_HTTP_Handler(srv EmployeeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetEmptyRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEmployeeDeps)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Deps(ctx, req.(*GetEmptyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetDepsReply)
		return ctx.Result(200, reply)
	}
}

func _Employee_Positions0_HTTP_Handler(srv EmployeeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetEmptyRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEmployeePositions)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Positions(ctx, req.(*GetEmptyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetPositionsReply)
		return ctx.Result(200, reply)
	}
}

func _Employee_MaxWorkID0_HTTP_Handler(srv EmployeeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetEmptyRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEmployeeMaxWorkID)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MaxWorkID(ctx, req.(*GetEmptyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetMaxWorkIDReply)
		return ctx.Result(200, reply)
	}
}

func _Employee_Export0_HTTP_Handler(srv EmployeeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetEmptyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEmployeeExport)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Export(ctx, req.(*GetEmptyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetExportReply)
		return ctx.Result(200, reply)
	}
}

type EmployeeHTTPClient interface {
	Deps(ctx context.Context, req *GetEmptyRequest, opts ...http.CallOption) (rsp *GetDepsReply, err error)
	Export(ctx context.Context, req *GetEmptyRequest, opts ...http.CallOption) (rsp *GetExportReply, err error)
	Joblevels(ctx context.Context, req *GetEmptyRequest, opts ...http.CallOption) (rsp *GetJoblevelsReply, err error)
	List(ctx context.Context, req *GetBasicRequest, opts ...http.CallOption) (rsp *EmployeeReply, err error)
	MaxWorkID(ctx context.Context, req *GetEmptyRequest, opts ...http.CallOption) (rsp *GetMaxWorkIDReply, err error)
	Nations(ctx context.Context, req *GetEmptyRequest, opts ...http.CallOption) (rsp *GetNationsReply, err error)
	Politicsstatus(ctx context.Context, req *GetEmptyRequest, opts ...http.CallOption) (rsp *GetPoliticsstatusReply, err error)
	Positions(ctx context.Context, req *GetEmptyRequest, opts ...http.CallOption) (rsp *GetPositionsReply, err error)
}

type EmployeeHTTPClientImpl struct {
	cc *http.Client
}

func NewEmployeeHTTPClient(client *http.Client) EmployeeHTTPClient {
	return &EmployeeHTTPClientImpl{client}
}

func (c *EmployeeHTTPClientImpl) Deps(ctx context.Context, in *GetEmptyRequest, opts ...http.CallOption) (*GetDepsReply, error) {
	var out GetDepsReply
	pattern := "/api/v1/employee/basic/deps"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationEmployeeDeps))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EmployeeHTTPClientImpl) Export(ctx context.Context, in *GetEmptyRequest, opts ...http.CallOption) (*GetExportReply, error) {
	var out GetExportReply
	pattern := "/employee/basic/export"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEmployeeExport))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EmployeeHTTPClientImpl) Joblevels(ctx context.Context, in *GetEmptyRequest, opts ...http.CallOption) (*GetJoblevelsReply, error) {
	var out GetJoblevelsReply
	pattern := "/api/v1/employee/basic/joblevels"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationEmployeeJoblevels))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EmployeeHTTPClientImpl) List(ctx context.Context, in *GetBasicRequest, opts ...http.CallOption) (*EmployeeReply, error) {
	var out EmployeeReply
	pattern := "/api/v1/employee/basic"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationEmployeeList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EmployeeHTTPClientImpl) MaxWorkID(ctx context.Context, in *GetEmptyRequest, opts ...http.CallOption) (*GetMaxWorkIDReply, error) {
	var out GetMaxWorkIDReply
	pattern := "/employee/basic/maxWorkID"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationEmployeeMaxWorkID))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EmployeeHTTPClientImpl) Nations(ctx context.Context, in *GetEmptyRequest, opts ...http.CallOption) (*GetNationsReply, error) {
	var out GetNationsReply
	pattern := "/api/v1/employee/basic/nations"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationEmployeeNations))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EmployeeHTTPClientImpl) Politicsstatus(ctx context.Context, in *GetEmptyRequest, opts ...http.CallOption) (*GetPoliticsstatusReply, error) {
	var out GetPoliticsstatusReply
	pattern := "/api/v1/employee/basic/politicsstatus"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationEmployeePoliticsstatus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EmployeeHTTPClientImpl) Positions(ctx context.Context, in *GetEmptyRequest, opts ...http.CallOption) (*GetPositionsReply, error) {
	var out GetPositionsReply
	pattern := "/api/v1/employee/basic/positions"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationEmployeePositions))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
