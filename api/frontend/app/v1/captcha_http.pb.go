// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.27.0
// source: v1/captcha.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationCaptChaGet = "/api.frontend.app.v1.CaptCha/Get"
const OperationCaptChaVerify = "/api.frontend.app.v1.CaptCha/Verify"

type CaptChaHTTPServer interface {
	// Get 获取验证码
	Get(context.Context, *GetCaptcha) (*GetCaptchaReply, error)
	// Verify 验证验证码
	Verify(context.Context, *VerifyCaptcha) (*VerifyCaptchaReply, error)
}

func RegisterCaptChaHTTPServer(s *http.Server, srv CaptChaHTTPServer) {
	r := s.Route("/")
	r.GET("/api/v1/captcha", _CaptCha_Get0_HTTP_Handler(srv))
	r.POST("/api/v1/captcha", _CaptCha_Verify0_HTTP_Handler(srv))
}

func _CaptCha_Get0_HTTP_Handler(srv CaptChaHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCaptcha
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCaptChaGet)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Get(ctx, req.(*GetCaptcha))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCaptchaReply)
		return ctx.Result(200, reply)
	}
}

func _CaptCha_Verify0_HTTP_Handler(srv CaptChaHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in VerifyCaptcha
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCaptChaVerify)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Verify(ctx, req.(*VerifyCaptcha))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*VerifyCaptchaReply)
		return ctx.Result(200, reply)
	}
}

type CaptChaHTTPClient interface {
	Get(ctx context.Context, req *GetCaptcha, opts ...http.CallOption) (rsp *GetCaptchaReply, err error)
	Verify(ctx context.Context, req *VerifyCaptcha, opts ...http.CallOption) (rsp *VerifyCaptchaReply, err error)
}

type CaptChaHTTPClientImpl struct {
	cc *http.Client
}

func NewCaptChaHTTPClient(client *http.Client) CaptChaHTTPClient {
	return &CaptChaHTTPClientImpl{client}
}

func (c *CaptChaHTTPClientImpl) Get(ctx context.Context, in *GetCaptcha, opts ...http.CallOption) (*GetCaptchaReply, error) {
	var out GetCaptchaReply
	pattern := "/api/v1/captcha"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCaptChaGet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CaptChaHTTPClientImpl) Verify(ctx context.Context, in *VerifyCaptcha, opts ...http.CallOption) (*VerifyCaptchaReply, error) {
	var out VerifyCaptchaReply
	pattern := "/api/v1/captcha"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCaptChaVerify))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
