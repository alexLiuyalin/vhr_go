GOPATH:=$(shell go env GOPATH)
GIT_BRANCH=$(shell git rev-parse --abbrev-ref HEAD)
GIT_COMMIT=$(shell git rev-parse --short HEAD)

BUILD_TIME=$(shell date +"%Y%M%d %H:%M:%S")
GO_VERSION=$(shell go version | awk '{print $3}')
APP_RELATIVE_PATH=$(shell a=`basename $$PWD` && cd .. && b=`basename $$PWD` && echo $$b/$$a)
APP_NAME=$(shell echo $(APP_RELATIVE_PATH) | sed -En "s/\//-/p")
INTERNAL_PROTO_FILES=$(shell find internal -type f -name *.proto)
API_PROTO_FILES=$(shell cd ../../../api/$(APP_RELATIVE_PATH) && find . -type f -name *.proto)

.PHONY: grpc
# generate grpc code
grpc:
	cd ../../../api/$(APP_RELATIVE_PATH) && protoc --proto_path=. \
		--proto_path=../../../third_party \
		--proto_path=../../../api \
		--go_out=paths=source_relative:. \
		--go-grpc_out=paths=source_relative:. \
		$(API_PROTO_FILES)

.PHONY: http
# generate http code
http:
	cd ../../../api/$(APP_RELATIVE_PATH) && protoc --proto_path=. \
		--proto_path=../../../third_party \
		--proto_path=../../../api \
		--go_out=paths=source_relative:. \
		--go-http_out=paths=source_relative:. \
		$(API_PROTO_FILES)

.PHONY: validate
# generate validate proto
validate:
	cd ../../../api/$(APP_RELATIVE_PATH) && protoc --proto_path=. \
		--proto_path=../../../third_party \
		--proto_path=../../../api \
		--go_out=paths=source_relative:. \
		--validate_out=paths=source_relative,lang=go:. \
		$(API_PROTO_FILES)

.PHONY: errors
# generate errors code
errors:
	cd ../../../api/$(APP_RELATIVE_PATH) && protoc --proto_path=. \
		--proto_path=../../../third_party \
		--proto_path=../../../api \
		--go_out=paths=source_relative:. \
		--go-errors_out=paths=source_relative:. \
		$(API_PROTO_FILES)

.PHONY: swagger
# generate swagger
swagger:
	cd ../../../api/$(APP_RELATIVE_PATH) && protoc --proto_path=. \
		--proto_path=../../../third_party \
		--proto_path=../../../api \
		--openapiv2_out . \
		--openapiv2_opt logtostderr=true \
		$(API_PROTO_FILES)

.PHONY: proto
# generate internal proto struct
proto:
	protoc --proto_path=. \
		--proto_path=../../../third_party \
		--proto_path=../../../api \
		--go_out=paths=source_relative:. \
		$(INTERNAL_PROTO_FILES)

.PHONY: config
# generate internal proto
config:
	protoc --proto_path=./internal \
		--proto_path=../../../third_party \
		--go_out=paths=source_relative:./internal \
		./internal/conf/*.proto


.PHONY: generate
# generate client code
generate:
	go generate ./...

.PHONY: build
# build
build:
	go build -v -ldflags "-s -w -X 'main.BuildTime=\"$(BUILD_TIME)\"' -X 'main.GitBranch=\"$(GIT_BRANCH)\"' -X 'main.GitHash=\"$(GIT_COMMIT)\"' -X 'main.GoVersion=\"$(GO_VERSION)\"'" -o ./bin/ ./...

.PHONY: test
# test
test:
	go test -v ./... -cover

.PHONY: run
run:
	cd cmd/server/ && go run .

.PHONY: ent
ent:
	go run -mod=mod ../../../pkg/ent/entc/entc.go ./internal/data/schema

.PHONY: docker
docker:
	cd ../../.. && docker build -f deploy/build/Dockerfile --build-arg APP_RELATIVE_PATH=$(APP_RELATIVE_PATH) -t $(DOCKER_IMAGE) .

.PHONY: wire
# generate wire
wire:
	cd cmd/server && wire

.PHONY: clear
clear:
	cd ../../../api/$(APP_RELATIVE_PATH) && find . -type f -name *.pb.go -print0 -o -name *.pb.validate.go -print0 -o -name *.swagger.json -print0 | xargs -0 rm -rf

.PHONY: api
# generate api proto
api: clear grpc http validate swagger errors

.PHONY: all
# generate all
all: clear grpc http proto generate build test

.PHONY: help
help:
	@echo $(BUILD_TIME)

.DEFAULT_GOAL := test
